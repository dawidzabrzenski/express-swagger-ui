{
  "openapi": "3.0.1",
  "info": {
    "title": "Tenant",
    "description": "Manages Data in a specific Facility and connects to the Hub for reporting to FAZIT",
    "version": "1.34.1.0"
  },
  "paths": {
    "/api/v1/app-scopes": {
      "get": {
        "tags": [
          "AppScopes"
        ],
        "summary": "List app scopes",
        "description": "List all available security scopes for the application enriched with metadata.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppScopeInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "app-scopes"
            ]
          }
        ]
      }
    },
    "/api/v1/app-settings": {
      "get": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Query All",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "description": "Query options for filtering, sorting or grouping",
            "schema": {
              "$ref": "#/components/schemas/QueryOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "app-settings/read"
            ]
          }
        ]
      }
    },
    "/api/v1/app-settings/{key}/overwrite": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Overwrite",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "App Setting key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Success"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "app-settings/write"
            ]
          }
        ]
      }
    },
    "/api/v1/app-settings/{key}/reset": {
      "put": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Reset",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "App Setting key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Success"
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "app-settings/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats": {
      "get": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Query Container Formats",
        "responses": {
          "200": {
            "description": "OK - Returns a list of Container Formats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerFormatInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Create a Container Format",
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - Returns created Format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}": {
      "get": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Retrieves a Container Format by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Container Format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a Container Format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Patch a Container Format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Delete a Container Format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "201": {
            "description": "Created - Returns created Revision"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions": {
      "get": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Retrieves Container Format Versions by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Container Format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a collection of Container Format Versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerFormatVersionRevisionInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Add Container Format Version",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/queries/revisioned": {
      "get": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Get Versions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Container Format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a collection of Container Format Versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RevisionedVersionInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/read"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/{format-version}/revisions": {
      "get": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Retrieves Container Format Version Revisions by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Container Format",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a collection of Container Format Version Revisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatVersionRevisionInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Create a new Revision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatVersionRevisionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatVersionRevisionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerFormatVersionRevisionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatVersionRevisionInformation"
                }
              }
            }
          },
          "201": {
            "description": "Created - Returns created Revision"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/{format-version}": {
      "patch": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Patch Container Format Version",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatVersionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatVersionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContainerFormatVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Remove Container Format Version",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerFormatInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/{format-version}/references": {
      "post": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Add Container Format Version Reference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionReferenceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionReferenceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddContainerFormatVersionReferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersistedContainerFormatReference"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/{format-version}/references/{referenced-container-format-id}": {
      "delete": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Remove Container Format Version Reference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "referenced-container-format-id",
            "in": "path",
            "description": "Referenced Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated - Returns updated Format"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersistedContainerFormatReference"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/container-formats/{id}/versions/{format-version}/revisions/{revision}": {
      "delete": {
        "tags": [
          "ContainerFormat"
        ],
        "summary": "Delete a Revision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Container Format Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "format-version",
            "in": "path",
            "description": "Version",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "revision",
            "in": "path",
            "description": "Revision",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Revision deleted"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "container-formats/write"
            ]
          }
        ]
      }
    },
    "/api/v1/databases/migrations/applied": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List applied migrations",
        "description": "Lists all registered database contexts and it's applied migrations.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "databases/all.readonly"
            ]
          }
        ]
      }
    },
    "/api/v1/databases/migrations/pending": {
      "get": {
        "tags": [
          "Databases"
        ],
        "summary": "List pending migrations",
        "description": "Lists all registered database contexts and it's pending migrations.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigrationInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "databases/all.readonly"
            ]
          }
        ]
      }
    },
    "/api/v1/databases/migrations/apply": {
      "post": {
        "tags": [
          "Databases"
        ],
        "summary": "Apply pending migrations",
        "description": "Applies all pending migrations from all database contexts.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "databases/all"
            ]
          }
        ]
      }
    },
    "/api/v1/ecu-hardware-specs": {
      "get": {
        "tags": [
          "EcuHardwareSpec"
        ],
        "summary": "Query ECU Hardware",
        "parameters": [
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a list of ECU Hardwares",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ecu-hardware-specs/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "EcuHardwareSpec"
        ],
        "summary": "Create a new ECU Hardware",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEcuHardwareSpecRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEcuHardwareSpecRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEcuHardwareSpecRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcuHardwareSpec"
                }
              }
            }
          },
          "201": {
            "description": "Created - Returns created ECU Hardware"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ecu-hardware-specs/write"
            ]
          }
        ]
      }
    },
    "/api/v1/ecu-hardware-specs/{id}": {
      "get": {
        "tags": [
          "EcuHardwareSpec"
        ],
        "summary": "Retrieves ECU Hardware by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the ECU Hardware",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a ECU Hardware",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcuHardwareSpecInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ecu-hardware-specs/read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EcuHardwareSpec"
        ],
        "summary": "Delete a ECU Hardware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - ECU Hardware deleted"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ecu-hardware-specs/write"
            ]
          }
        ]
      }
    },
    "/api/v1/events/streaming/status": {
      "get": {
        "tags": [
          "EventStreaming"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStreamGroupStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "events/read"
            ]
          }
        ]
      }
    },
    "/api/v1/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Query",
        "parameters": [
          {
            "name": "queryOptions",
            "in": "query",
            "description": "Options providing how to filter, sort or group the events.",
            "schema": {
              "$ref": "#/components/schemas/QueryOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "events/read"
            ]
          }
        ]
      }
    },
    "/api/v1/events/{aggregate-type}/{aggregate-id}/history": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Read History",
        "parameters": [
          {
            "name": "aggregate-type",
            "in": "path",
            "description": "Type name of the aggregate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aggregate-id",
            "in": "path",
            "description": "Id of the aggregate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "How many events to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "How many events to take.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoricEventInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "events/read"
            ]
          }
        ]
      }
    },
    "/api/v1/events/{aggregate-type}/{aggregate-id}/compare": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Compare",
        "parameters": [
          {
            "name": "aggregate-type",
            "in": "path",
            "description": "Type name of the aggregate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aggregate-id",
            "in": "path",
            "description": "Id of the aggregate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstStateSequence",
            "in": "query",
            "description": "Where to start the compare.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "secondStateSequence",
            "in": "query",
            "description": "The .",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateComparsion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "events/read"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KeyGroup"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyGroupInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyGroupInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PatchKeyGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyGroupInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/definitions": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyDefinitionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/definitions/{key-definition-id}": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key-definition-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key-definition-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PatchKeyDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key-definition-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/instances": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyGroupInstanceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyGroupInstanceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddKeyGroupInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/instances/{instance-id}": {
      "get": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "instance-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyGroupInstance"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/read"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/instances/{key-group-instance-id}": {
      "patch": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key-group-instance-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PatchKeyGroupInstanceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-groups/{id}/instances/{key-definition-id}": {
      "delete": {
        "tags": [
          "KeyGroup"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key-definition-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-groups/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/key-templates": {
      "get": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KeyTemplate"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-templates/{id}": {
      "get": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PatchTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/key-templates/{id}/data-blocks": {
      "get": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataBlockRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataBlockRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataBlockRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/write"
            ]
          }
        ]
      }
    },
    "/api/v1/key-templates/{id}/data-blocks/{data-block-id}": {
      "get": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "data-block-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "data-block-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataBlockRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataBlockRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDataBlockRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "data-block-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/key-templates/{id}/generate/{date}": {
      "get": {
        "tags": [
          "KeyTemplate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "key-templates/read"
            ]
          }
        ]
      }
    },
    "/api/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Query Products",
        "parameters": [
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a list of Products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create Product",
        "requestBody": {
          "description": "Data required for creating the product and it's keys",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Returns a a collection of keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves Product by identifier",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/identifiers/{requested-identifier-name}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves Product identifier by another identifier",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requested-identifier-name",
            "in": "path",
            "description": "Name of the requested Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a Product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/prepare-flashing/{station-id}": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Prepare Flashing",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "station-id",
            "in": "path",
            "description": "Id of the flash station",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          },
          {
            "name": "container-format-version",
            "in": "query",
            "description": "Version of the Container Format to prepare.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output-hex",
            "in": "query",
            "description": "Output as Hex; set to `true` if files with extension .hex should be included. Default: `false`",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerTranfserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/containers": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create Container",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContainerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/containers/{container-id}/download": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Download Container",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "container-id",
            "in": "path",
            "description": "Id of the Container",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-created": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Mark as Created",
        "description": "Marks a Product as Created.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-initial-security-flashed": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Mark as Initial Security Flashed",
        "description": "Marks a Product as Initial Security Flashed.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-pss-security-flashed": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Mark as PSS Security Flashed",
        "description": "Marks a Product as PSS Security Flashed.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-serial-activated": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Serial Activation Done",
        "description": "When the serial activation was done the Product will be marked as Initialized.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-produced": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Mark as Produced",
        "description": "Marks a Product as Produced and publishes it.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/mark-as-failed": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Mark as Failed",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/publish": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Publish Product",
        "description": "Marks a Product as Produced and publishes it.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Succeeded"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/scrap": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Scrap",
        "description": "Marks a Product as Scrapping and notifies the hub.",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "requestBody": {
          "description": "Optional status information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - Succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/write"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/hosts/secrets/{type}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve decrypted host secret",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of the host secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyContainer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/hosts/secrets": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all decrypted host secrets",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a list of secret containers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/debug-keys/{name}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve decrypted debug key",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the debug key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyContainer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/debug-keys": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all decrypted debug keys",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/ecu-keys/{name}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve decrypted ecu key",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the ecu key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyContainer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/ecu-keys": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all decrypted ecu keys",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/{identifier-value}/keys": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve all keys for a product",
        "parameters": [
          {
            "name": "identifier-value",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Key types to return if empty all types are returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "identifier-name",
            "in": "query",
            "description": "Name of the Product identifier",
            "schema": {
              "type": "string",
              "default": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a host secret",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyContainer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/read/secrets"
            ]
          }
        ]
      }
    },
    "/api/v1/products/import": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Import",
        "description": "Import a file (CSV) with products from other systems",
        "parameters": [
          {
            "name": "f1a3-ecu-hardware-spec-version",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Y01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "products/import"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/state": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "List Queue State",
        "description": "Provides state information about all registered queues",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueState"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/state": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "Get Queue State",
        "description": "Provides state information about the requested queue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueState"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/statistics": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "Get Queue Statistics",
        "description": "Provides state information about the requested queue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueStatistics"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/messages": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "Query Queue Messages",
        "description": "Queries all Messages in a queue using provided queryOptions",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/messages/{id}": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "Get Queue Message",
        "description": "Returns a specific message from a queue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Queueing"
        ],
        "summary": "Set Queue Message Status",
        "description": "Set's the message to the provided state.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "New Message status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMessageStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMessageStatusRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetMessageStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/messages/{id}/raw": {
      "get": {
        "tags": [
          "Queueing"
        ],
        "summary": "Get Raw Queue Message",
        "description": "Returns a specific message from a queue including the payload",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/read"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/dequeue": {
      "post": {
        "tags": [
          "Queueing"
        ],
        "summary": "Dequeue",
        "description": "Dequeue's a message.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/enqueue": {
      "post": {
        "tags": [
          "Queueing"
        ],
        "summary": "Enqueue",
        "description": "Enqueue's a message.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to enqueue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/retry": {
      "post": {
        "tags": [
          "Queueing"
        ],
        "summary": "Retry",
        "description": "Set's the message to retry state.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to enqueue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RetryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/commit": {
      "post": {
        "tags": [
          "Queueing"
        ],
        "summary": "Commit",
        "description": "Set's the message to committed state.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to enqueue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/queues/{queueName}/fail": {
      "post": {
        "tags": [
          "Queueing"
        ],
        "summary": "Fail",
        "description": "Set's the message to failed state.",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "description": "Name of the queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to enqueue.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "queues/write"
            ]
          }
        ]
      }
    },
    "/api/v1/secure-shipment-keys": {
      "get": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "parameters": [
          {
            "name": "require-total-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "require-group-count",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is-count-query",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortingOptions"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupingOptions"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "total-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "group-summary",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SummaryOptions"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSecureShipmentKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSecureShipmentKeyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateSecureShipmentKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureShipmentKeyInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/write"
            ]
          }
        ]
      }
    },
    "/api/v1/secure-shipment-keys/{id}": {
      "get": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureShipmentKeyInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PatchSecureShipmentKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureShipmentKeyInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureShipmentKeyInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/delete"
            ]
          }
        ]
      }
    },
    "/api/v1/secure-shipment-keys/import": {
      "post": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSecureShipmentKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSecureShipmentKeyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSecureShipmentKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureShipmentKeyInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/write"
            ]
          }
        ]
      }
    },
    "/api/v1/secure-shipment-keys/{id}/decrypt": {
      "get": {
        "tags": [
          "SecureShipmentKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptedHexKeys"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "secure-shipment-keys/read/secure"
            ]
          }
        ]
      }
    },
    "/api/v1/stations": {
      "get": {
        "tags": [
          "Stations"
        ],
        "summary": "Query Stations",
        "responses": {
          "200": {
            "description": "OK - Returns a list of Stations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stations"
        ],
        "summary": "Create a new Station",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Station"
                }
              }
            }
          },
          "201": {
            "description": "Created - Returns created Station"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/write"
            ]
          }
        ]
      }
    },
    "/api/v1/stations/{id}": {
      "get": {
        "tags": [
          "Stations"
        ],
        "summary": "Retrieves a Station by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Station",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns a Station",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StationInformation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Stations"
        ],
        "summary": "Patch a Station",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Returns updated Station",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Station"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Stations"
        ],
        "summary": "Delete a Station",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Station deleted"
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/write"
            ]
          }
        ]
      }
    },
    "/api/v1/stations/{id}/set-default-container-format": {
      "patch": {
        "tags": [
          "Stations"
        ],
        "summary": "Set the default Container Format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDefaultContainerFormatRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDefaultContainerFormatRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDefaultContainerFormatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK - Returns updated Station",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Station"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Input is invalid or empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stations/write"
            ]
          }
        ]
      }
    },
    "/api/v1/tenant": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Get configured DUNS",
        "description": "Get the configured Tenant DUNS for this FMS Tenant",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "tenant/read"
            ]
          }
        ]
      }
    },
    "/api/v1/versions": {
      "get": {
        "tags": [
          "Versions"
        ],
        "summary": "List Versions",
        "description": "Provides version information about the API and its components",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "versions/all.readonly"
            ]
          }
        ]
      }
    },
    "/api/v1/whoami": {
      "get": {
        "tags": [
          "Whoami"
        ],
        "summary": "Whoami",
        "description": "The current user (the caller of this method) is examined and it's user details are returned.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Whoami"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "whoami"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddContainerFormatVersionReferenceRequest": {
        "required": [
          "referencedContainerFormatId"
        ],
        "type": "object",
        "properties": {
          "referencedContainerFormatId": {
            "type": "string",
            "description": "Referenced Container Format",
            "format": "uuid"
          },
          "referencedVersion": {
            "type": "integer",
            "description": "Referenced Container Format Version",
            "format": "int32",
            "nullable": true
          },
          "referencedRevision": {
            "type": "integer",
            "description": "Referenced Container Format Revision",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Add Container Format Version Reference Request"
      },
      "AddContainerFormatVersionRequest": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "description": "Version",
            "format": "int32"
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Add Container Format Version Request"
      },
      "AddDataBlockRequest": {
        "required": [
          "endAddress",
          "name",
          "startAddress"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "nullable": true
          },
          "startAddress": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string"
          },
          "endAddress": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string"
          },
          "keyReference": {
            "$ref": "#/components/schemas/KeyReference"
          },
          "data": {
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddKeyDefinitionRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "length": {
            "maximum": 4096,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "generate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AddKeyGroupInstanceRequest": {
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "nullable": true
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyRequestHex"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregateComparsion": {
        "type": "object",
        "properties": {
          "aggregateId": {
            "type": "string",
            "nullable": true
          },
          "firstState": {
            "nullable": true
          },
          "secondState": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppScopeInformation": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/AppScopeMetadata"
          }
        },
        "additionalProperties": false
      },
      "AppScopeMetadata": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "orderInGroup": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AppSettingValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommitRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ConsumerState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "queueName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "stopsOnError": {
            "type": "boolean"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "failed": {
            "type": "integer",
            "format": "int64"
          },
          "succeeded": {
            "type": "integer",
            "format": "int64"
          },
          "minProcessingTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "averageProcessingTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "maxProcessingTime": {
            "$ref": "#/components/schemas/TimeSpan"
          },
          "status": {
            "$ref": "#/components/schemas/ConsumerStatus"
          }
        },
        "additionalProperties": false
      },
      "ConsumerStatus": {
        "enum": [
          "Created",
          "Running",
          "Failed"
        ],
        "type": "string"
      },
      "ContainerDownloadInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "issuedBy": {
            "type": "string",
            "nullable": true
          },
          "downloadedAtUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Information about a transfer of a Container"
      },
      "ContainerFileInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "crc": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a Container File"
      },
      "ContainerFormatInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PersistedContainerFormatType"
          },
          "documentation": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container Format Version Information"
      },
      "ContainerFormatVersionRevisionInformation": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container Format Version Revision"
      },
      "ContainerInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "format": {
            "$ref": "#/components/schemas/ContainerInstanceFormatInformation"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerFileInformation"
            },
            "nullable": true
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerTransferInformation"
            },
            "nullable": true
          },
          "downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerDownloadInformation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a Container"
      },
      "ContainerInstanceFormatInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Information about a Container Format"
      },
      "ContainerTranfserResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the File to Flash.",
            "nullable": true
          },
          "crc": {
            "type": "string",
            "description": "Crc of the File's data.",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Prepare Flashing Result"
      },
      "ContainerTransferInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "stationId": {
            "type": "string",
            "nullable": true
          },
          "issuedBy": {
            "type": "string",
            "nullable": true
          },
          "transferedAtUtc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Information about a transfer of a Container"
      },
      "CreateContainerFormatRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Name"
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create Container Format Request"
      },
      "CreateContainerFormatVersionRevisionRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Revision Description",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Properties",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create Container Format Version Revision Request"
      },
      "CreateContainerRequest": {
        "type": "object",
        "properties": {
          "containerFormatId": {
            "type": "string",
            "description": "Container Format Id",
            "format": "uuid"
          },
          "containerFormatVersion": {
            "type": "string",
            "description": "Container format version",
            "nullable": true
          },
          "replaceExisting": {
            "type": "boolean",
            "description": "If true, an existing container will be replaced."
          }
        },
        "additionalProperties": false,
        "description": "Create Container Request"
      },
      "CreateEcuHardwareSpecRequest": {
        "type": "object",
        "properties": {
          "f191EcuHardwareSpecNumber": {
            "type": "string",
            "description": "F191 ECU Hardware Number",
            "nullable": true
          },
          "f1A3EcuHardwareSpecVersion": {
            "type": "string",
            "description": "F1A3 ECU Hardware Version",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Immobilizer Brand",
            "nullable": true
          },
          "ecuLayout": {
            "$ref": "#/components/schemas/EcuLayout"
          },
          "siteIdentificationLabel": {
            "type": "string",
            "description": "Site Identification Label",
            "nullable": true
          },
          "hostId": {
            "type": "string",
            "description": "Host Id",
            "nullable": true
          },
          "assemblyId": {
            "type": "string",
            "description": "Assembly Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to Create a Adestis.Gkn.Fms.Tenant.Products.EcuHardwareSpecs.EcuHardwareSpec."
      },
      "CreateKeyGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProductRequest": {
        "required": [
          "eolNumber",
          "f191EcuHardwareSpecNumber",
          "f1A3EcuHardwareSpecVersion",
          "internalSerialNumber"
        ],
        "type": "object",
        "properties": {
          "internalSerialNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Internal unique serial number"
          },
          "f191EcuHardwareSpecNumber": {
            "minLength": 1,
            "type": "string",
            "description": "F191 ECU Hardware Number"
          },
          "f1A3EcuHardwareSpecVersion": {
            "minLength": 1,
            "type": "string",
            "description": "F1A3 ECU Hardware Version"
          },
          "eolNumber": {
            "type": "integer",
            "description": "Number of the EOL there the Product will be produced",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request to create a Product"
      },
      "CreateProductResponse": {
        "type": "object",
        "properties": {
          "fazitId": {
            "type": "string",
            "description": "Fazit Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response for a created product"
      },
      "CreateStationRequest": {
        "required": [
          "identifier",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Human readable Identifier"
          },
          "eolNumber": {
            "type": "integer",
            "description": "EOL Number",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Station"
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "url": {
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Url",
            "format": "uri"
          },
          "afterTransferProductionStatus": {
            "$ref": "#/components/schemas/ProductProductionStatus"
          }
        },
        "additionalProperties": false,
        "description": "Request to create a Station"
      },
      "CreateTemplateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "outputType": {
            "$ref": "#/components/schemas/OutputType"
          }
        },
        "additionalProperties": false
      },
      "DebugKeyInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "redacted": {
            "type": "boolean",
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "Information about a Adestis.Gkn.Fms.Tenant.Products.DebugKey"
      },
      "DecryptedHexKeys": {
        "type": "object",
        "properties": {
          "debugKey": {
            "type": "string",
            "nullable": true
          },
          "hostPflashKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EcuHardwareSpec": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int64"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isPristine": {
            "type": "boolean",
            "readOnly": true
          },
          "f191EcuHardwareSpecNumber": {
            "type": "string",
            "description": "F191 ECU Hardware Number",
            "nullable": true
          },
          "f1A3EcuHardwareSpecVersion": {
            "type": "string",
            "description": "F1A3 ECU Hardware Version",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Immobilizer Brand",
            "nullable": true
          },
          "ecuLayout": {
            "$ref": "#/components/schemas/EcuLayout"
          },
          "siteIdentificationLabel": {
            "type": "string",
            "description": "Site Identification Label",
            "nullable": true
          },
          "hostId": {
            "type": "string",
            "description": "Host Id",
            "nullable": true
          },
          "assemblyId": {
            "type": "string",
            "description": "Assembly Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An ECU Hardware defines several attributes that should\r\nbe mapped for a specifc Adestis.Gkn.Fms.Tenant.Products.EcuHardwareSpecs.EcuHardwareSpec.F191EcuHardwareSpecNumber and Adestis.Gkn.Fms.Tenant.Products.EcuHardwareSpecs.EcuHardwareSpec.F1A3EcuHardwareSpecVersion"
      },
      "EcuHardwareSpecInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Identifier",
            "format": "uuid"
          },
          "f191EcuHardwareSpecNumber": {
            "type": "string",
            "description": "F191 ECU Hardware Number",
            "nullable": true
          },
          "f1A3EcuHardwareSpecVersion": {
            "type": "string",
            "description": "F1A3 ECU Hardware Version",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Immobilizer Brand",
            "nullable": true
          },
          "ecuLayout": {
            "$ref": "#/components/schemas/EcuLayout"
          },
          "siteIdentificationLabel": {
            "type": "string",
            "description": "Site Identification Label",
            "nullable": true
          },
          "hostId": {
            "type": "string",
            "description": "Host Id",
            "nullable": true
          },
          "assemblyId": {
            "type": "string",
            "description": "Assembly Id",
            "nullable": true
          },
          "seriesIdentifier": {
            "type": "string",
            "description": "Series Identifier",
            "nullable": true,
            "readOnly": true
          },
          "wfsSheFlag": {
            "type": "string",
            "description": "Wfs She Flag",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A readonly version of Adestis.Gkn.Fms.Tenant.Products.EcuHardwareSpecs.EcuHardwareSpec."
      },
      "EcuLayout": {
        "enum": [
          "Unknown",
          "PWR1"
        ],
        "type": "string",
        "description": "Ecu Layout"
      },
      "EventStreamGroupConnectionStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "sub": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventStreamGroupStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "listeningTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventStreamGroupConnectionStatus"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StreamingStatus"
          }
        },
        "additionalProperties": false
      },
      "FailRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Flag": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Flag"
      },
      "GenerateSecureShipmentKeyRequest": {
        "required": [
          "validFrom",
          "validTo"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupingOptions": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "boolean"
          },
          "groupInterval": {
            "type": "string",
            "nullable": true
          },
          "isExpanded": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoricEventInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "format": "uuid"
          },
          "sequence": {
            "type": "integer",
            "description": "Sequence",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "Event Type",
            "nullable": true
          },
          "typeDisplayName": {
            "type": "string",
            "description": "Display Name of the Event Type",
            "nullable": true
          },
          "typeDescription": {
            "type": "string",
            "description": "Type of Description",
            "nullable": true
          },
          "payload": {
            "description": "Payload",
            "nullable": true
          },
          "createdAtUtc": {
            "type": "string",
            "description": "Created At (UTC)",
            "format": "date-time"
          },
          "issuer": {
            "$ref": "#/components/schemas/Issuer"
          }
        },
        "additionalProperties": false,
        "description": "Represent's Event information without the payload."
      },
      "HostAssembly": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Host Assembly uniquely defined module number (Id) per diagnostic address."
      },
      "HostInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretInformation"
            },
            "nullable": true
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flag"
            },
            "nullable": true
          },
          "assemblies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostAssembly"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a Adestis.Gkn.Fms.Tenant.Products.Host"
      },
      "Identifier": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This record is used to attach multiple Identifiers (mostly third party) to an existing model in our system."
      },
      "ImportResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "imported": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Import Result"
      },
      "ImportSecureShipmentKeyRequest": {
        "required": [
          "hexDebugKey",
          "hexHostPflashKey",
          "type",
          "validFrom",
          "validTo"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "hexDebugKey": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "hexHostPflashKey": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Issuer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "client": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Key": {
        "required": [
          "definitionId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "definitionId": {
            "type": "string",
            "format": "uuid"
          },
          "encryptedValue": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "length": {
            "maximum": 4096,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "generated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "KeyContainer": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/KeyContainerHeader"
          },
          "payload": {
            "$ref": "#/components/schemas/KeyContainerPayload"
          }
        },
        "additionalProperties": false,
        "description": "Ecu Key Container"
      },
      "KeyContainerHeader": {
        "type": "object",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "name": {
            "type": "string",
            "description": "Ecu Key Name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Ecu Key Container Header"
      },
      "KeyContainerPayload": {
        "type": "object",
        "properties": {
          "hexValue": {
            "type": "string",
            "description": "Value of the Key as Hex",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Ecu Key Container Payload"
      },
      "KeyDefinition": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "length": {
            "maximum": 4096,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "generate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "KeyGroupInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "keyDefinitionCount": {
            "type": "integer",
            "format": "int32"
          },
          "keyCollectionCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "KeyGroupInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            },
            "nullable": true
          },
          "revoked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "KeyReference": {
        "type": "object",
        "properties": {
          "keyGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "keyDefinitionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KeyRequestHex": {
        "type": "object",
        "properties": {
          "keyDefinitionId": {
            "type": "string",
            "format": "uuid"
          },
          "generate": {
            "type": "boolean"
          },
          "valueHex": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KeyType": {
        "enum": [
          "Random"
        ],
        "type": "string"
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "nullable": true
          },
          "payload": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "exception": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageStatus": {
        "enum": [
          "Enqueued",
          "Dequeued",
          "Retrying",
          "Committed",
          "Failed"
        ],
        "type": "string"
      },
      "MigrationInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "migrations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutputType": {
        "enum": [
          "Raw",
          "IntelHex"
        ],
        "type": "string"
      },
      "PatchContainerFormatRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create Container Format Request"
      },
      "PatchContainerFormatVersionRequest": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Add Container Format Version Request"
      },
      "PatchDataBlockRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "nullable": true
          },
          "startAddress": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string",
            "nullable": true
          },
          "endAddress": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string",
            "nullable": true
          },
          "keyReference": {
            "$ref": "#/components/schemas/KeyReference"
          },
          "data": {
            "pattern": "[0-9a-fA-F\n]+",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchKeyDefinitionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "length": {
            "maximum": 4096,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "generate": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchKeyGroupInstanceRequest": {
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchKeyGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchSecureShipmentKeyRequest": {
        "required": [
          "validFrom",
          "validTo"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "isCompromised": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PatchStationRequest": {
        "type": "object",
        "properties": {
          "eolNumber": {
            "type": "integer",
            "description": "EOL Number",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the Station",
            "nullable": true
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "url": {
            "maxLength": 400,
            "type": "string",
            "description": "Url",
            "format": "uri",
            "nullable": true
          },
          "afterTransferProductionStatus": {
            "$ref": "#/components/schemas/ProductProductionStatus"
          }
        },
        "additionalProperties": false,
        "description": "Patch Station Request"
      },
      "PatchTemplateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "outputType": {
            "$ref": "#/components/schemas/OutputType"
          }
        },
        "additionalProperties": false
      },
      "PersistedContainerFormatReference": {
        "type": "object",
        "properties": {
          "containerFormatId": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "revision": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Persisted Container Format Reference"
      },
      "PersistedContainerFormatType": {
        "enum": [
          "Fix",
          "Compound"
        ],
        "type": "string",
        "description": "Perstisted Container Format Type"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ProducerState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "failedAttempts": {
            "type": "integer",
            "format": "int64"
          },
          "lastHeartbeatUtc": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ProducerStatus"
          }
        },
        "additionalProperties": false
      },
      "ProducerStatus": {
        "enum": [
          "Created",
          "Running",
          "Failed"
        ],
        "type": "string"
      },
      "ProductInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Identifier",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "productionStatus": {
            "$ref": "#/components/schemas/ProductProductionStatus"
          },
          "productionStatusReason": {
            "type": "string",
            "description": "Production Status Reason",
            "nullable": true
          },
          "reportingStatus": {
            "$ref": "#/components/schemas/ProductReportingStatus"
          },
          "reportingStatusReason": {
            "type": "string",
            "description": "Reporting Status Reason",
            "nullable": true
          },
          "batchId": {
            "type": "string",
            "description": "Batch ID",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/EcuLayout"
          },
          "productionDate": {
            "type": "string",
            "description": "Production Date",
            "format": "date-time"
          },
          "f191EcuHardwareSpecNumber": {
            "type": "string",
            "description": "F191 ECU Hardware Number",
            "nullable": true
          },
          "f1A3EcuHardwareSpecVersion": {
            "type": "string",
            "description": "F1A3 ECU Hardware Version",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version Number",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Immobilizer Brand",
            "nullable": true
          },
          "seriesIdentifier": {
            "type": "string",
            "description": "Series Identifier",
            "nullable": true
          },
          "eolNumber": {
            "type": "integer",
            "description": "Number of the EOL there the product is produced",
            "format": "int32"
          },
          "runningNumber": {
            "type": "integer",
            "description": "Running Number of the product for a line",
            "format": "int32"
          },
          "source": {
            "type": "string",
            "description": "Source of the Product",
            "nullable": true
          },
          "secretsRedacted": {
            "type": "boolean",
            "description": "Indicates that the secrets of this instance have been Redacted."
          },
          "reportingAtUtc": {
            "type": "string",
            "description": "Latest Expected Upload Time (UTC)",
            "format": "date-time",
            "nullable": true
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostInformation"
            },
            "description": "A Collection of Adestis.Gkn.Fms.Tenant.Products.Host",
            "nullable": true
          },
          "debugKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DebugKeyInformation"
            },
            "description": "A Collection of Adestis.Gkn.Fms.Tenant.Products.DebugKey",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identifier"
            },
            "description": "A Collection of Adestis.Gkn.Fms.Tenant.Products.Identifier",
            "nullable": true
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerInformation"
            },
            "description": "A Collection of Adestis.Gkn.Fms.Tenant.Products.Containers.ContainerInformation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A readonly version of Adestis.Gkn.Fms.Tenant.Products.Product"
      },
      "ProductProductionStatus": {
        "enum": [
          "Created",
          "InitialSecurityFlashing",
          "InitialSecurityFlashed",
          "PssSecurityFlashing",
          "PssSecurityFlashed",
          "SerialActivating",
          "SerialActivated",
          "Produced",
          "Failed",
          "Scrapping",
          "Scrapped"
        ],
        "type": "string",
        "description": "Product Lifecylce Status"
      },
      "ProductReportingStatus": {
        "enum": [
          "Created",
          "WaitingForReporting",
          "Reporting",
          "Accepted",
          "Rejected"
        ],
        "type": "string",
        "description": "Product Lifecylce Status"
      },
      "Property": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Property"
      },
      "QueryOptions": {
        "type": "object",
        "properties": {
          "requireTotalCount": {
            "type": "boolean"
          },
          "requireGroupCount": {
            "type": "boolean"
          },
          "isCountQuery": {
            "type": "boolean"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortingOptions"
            },
            "nullable": true
          },
          "group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupingOptions"
            },
            "nullable": true
          },
          "filter": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "totalSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOptions"
            },
            "nullable": true
          },
          "groupSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryOptions"
            },
            "nullable": true
          },
          "select": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "groupCount": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueueState": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "stats": {
            "$ref": "#/components/schemas/QueueStatistics"
          },
          "producers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProducerState"
            },
            "nullable": true
          },
          "consumers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerState"
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueueStatistics": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "enqueued": {
            "type": "integer",
            "format": "int64"
          },
          "dequeued": {
            "type": "integer",
            "format": "int64"
          },
          "retrying": {
            "type": "integer",
            "format": "int64"
          },
          "committed": {
            "type": "integer",
            "format": "int64"
          },
          "failed": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "RetryRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RevisionedVersionInformation": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "versionDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "revisionDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Revisioned Version Information"
      },
      "SecretInformation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "redacted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Information about a Adestis.Gkn.Fms.Tenant.Products.Secret"
      },
      "SecureShipmentKeyInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "isCompromised": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SetDefaultContainerFormatRequest": {
        "type": "object",
        "properties": {
          "defaultContainerFormatId": {
            "type": "string",
            "description": "Default Container Format",
            "format": "uuid",
            "nullable": true
          },
          "defaultContainerFormatVersion": {
            "type": "integer",
            "description": "Default Container Format Version",
            "format": "int32",
            "nullable": true
          },
          "defaultContainerFormatRevision": {
            "type": "integer",
            "description": "Default Container Format Revision",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Set Default Container Format Request"
      },
      "SetMessageStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          }
        },
        "additionalProperties": false
      },
      "SortingOptions": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Station": {
        "required": [
          "id",
          "identifier",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int64"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isPristine": {
            "type": "boolean",
            "readOnly": true
          },
          "identifier": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Human readable Identifier"
          },
          "eolNumber": {
            "type": "integer",
            "description": "EOL Number",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Station"
          },
          "description": {
            "maxLength": 400,
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "url": {
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "URL",
            "format": "uri"
          },
          "defaultContainerFormatId": {
            "type": "string",
            "description": "Default Container Format",
            "format": "uuid",
            "nullable": true
          },
          "defaultContainerFormatVersion": {
            "type": "integer",
            "description": "Default Container Format Version",
            "format": "int32",
            "nullable": true
          },
          "defaultContainerFormatRevision": {
            "type": "integer",
            "description": "Default Container Format Revision",
            "format": "int32",
            "nullable": true
          },
          "afterTransferProductionStatus": {
            "$ref": "#/components/schemas/ProductProductionStatus"
          }
        },
        "additionalProperties": false,
        "description": "A Station in a Production Line"
      },
      "StationInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Identifier",
            "format": "uuid"
          },
          "identifier": {
            "type": "string",
            "description": "Human readable Identifier",
            "nullable": true
          },
          "eolNumber": {
            "type": "integer",
            "description": "EOL Number",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the Station",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL",
            "nullable": true
          },
          "defaultContainerFormatId": {
            "type": "string",
            "description": "Default Container Format",
            "format": "uuid",
            "nullable": true
          },
          "defaultContainerFormatVersion": {
            "type": "integer",
            "description": "Default Container Format Version",
            "format": "int32",
            "nullable": true
          },
          "defaultContainerFormatRevision": {
            "type": "integer",
            "description": "Default Container Format Revision",
            "format": "int32",
            "nullable": true
          },
          "afterTransferProductionStatus": {
            "$ref": "#/components/schemas/ProductProductionStatus"
          }
        },
        "additionalProperties": false,
        "description": "Station Information"
      },
      "StatusInformationRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the Status change",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Status change request"
      },
      "StreamingStatus": {
        "enum": [
          "Connected",
          "CatchingUp",
          "Live"
        ],
        "type": "string"
      },
      "SummaryOptions": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "nullable": true
          },
          "summaryType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplateInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "outputType": {
            "$ref": "#/components/schemas/OutputType"
          },
          "dataBlockCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Whoami": {
        "type": "object",
        "properties": {
          "isAuthenticated": {
            "type": "boolean",
            "description": "Indicates if the user is authenticated."
          },
          "authenticationType": {
            "type": "string",
            "description": "Specifies the authentication type e.g. \"AuthenticationTypes.Federation\".",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The display name of the user.",
            "nullable": true
          },
          "allowedScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of access rules for api endpoints.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the currently authenticated user."
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.fms.driveline.gkn.com/connect/authorize",
            "tokenUrl": "https://login.fms.driveline.gkn.com/",
            "scopes": {
              "https://fms.gkn.com/app-scopes": "",
              "https://fms.gkn.com/app-settings/read": "",
              "https://fms.gkn.com/app-settings/write": "",
              "https://fms.gkn.com/container-formats/read": "",
              "https://fms.gkn.com/container-formats/write": "",
              "https://fms.gkn.com/databases/all": "",
              "https://fms.gkn.com/databases/all.readonly": "",
              "https://fms.gkn.com/ecu-hardware-specs/read": "",
              "https://fms.gkn.com/ecu-hardware-specs/write": "",
              "https://fms.gkn.com/events/read": "",
              "https://fms.gkn.com/key-groups/delete": "",
              "https://fms.gkn.com/key-groups/read": "",
              "https://fms.gkn.com/key-groups/write": "",
              "https://fms.gkn.com/key-templates/delete": "",
              "https://fms.gkn.com/key-templates/read": "",
              "https://fms.gkn.com/key-templates/write": "",
              "https://fms.gkn.com/products/import": "",
              "https://fms.gkn.com/products/read": "",
              "https://fms.gkn.com/products/read/secrets": "",
              "https://fms.gkn.com/products/write": "",
              "https://fms.gkn.com/products/write/secrets": "",
              "https://fms.gkn.com/queues/read": "",
              "https://fms.gkn.com/queues/write": "",
              "https://fms.gkn.com/secure-shipment-keys/delete": "",
              "https://fms.gkn.com/secure-shipment-keys/read": "",
              "https://fms.gkn.com/secure-shipment-keys/read/secure": "",
              "https://fms.gkn.com/secure-shipment-keys/write": "",
              "https://fms.gkn.com/stations/read": "",
              "https://fms.gkn.com/stations/write": "",
              "https://fms.gkn.com/tenant/read": "",
              "https://fms.gkn.com/versions/all.readonly": "",
              "https://fms.gkn.com/whoami": ""
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Tenant",
      "x-displayName": "Tenant"
    },
    {
      "name": "Versions",
      "description": "Provides version information about the API and its components",
      "x-displayName": "Versions"
    },
    {
      "name": "Databases",
      "description": "Shows information about used databases and provides functions for migrating new versions.",
      "x-displayName": "Databases"
    },
    {
      "name": "AppSettings",
      "description": "Provide operations to query, overwrite and reset settings in the application config.\r\n<br>\r\nConfiguration item keys are stored in a hierarchical way:\r\n```\r\nLogging\r\n    LogLevel\r\n        Default\r\n```\r\nis stored and retrieved as `Logging:LogLevel:Default`.\r\n",
      "x-displayName": "App Settings"
    },
    {
      "name": "AppScopes",
      "description": "Provide information of security scopes for the application.",
      "x-displayName": "Application Scopes"
    },
    {
      "name": "Whoami",
      "description": "Provide detailed information of (authenticated) users.",
      "x-displayName": "Who am I"
    },
    {
      "name": "Queueing",
      "x-displayName": "Queues"
    },
    {
      "name": "ContainerFormat",
      "description": "Provides operations to manage Container Formats.",
      "x-displayName": "Container Format"
    },
    {
      "name": "EcuHardwareSpec",
      "description": "Provides operations to manage ECU Hardware Informations.",
      "x-displayName": "ECU Hardware Specs"
    },
    {
      "name": "Products",
      "description": "Provides operations to manage Products.",
      "x-displayName": "Products"
    },
    {
      "name": "Stations",
      "description": "Provides operations to manage Stations in a Production Line.",
      "x-displayName": "Stations"
    },
    {
      "name": "Events",
      "x-displayName": "Events"
    }
  ],
  "x-tagGroups": [
    {
      "name": "FMS",
      "tags": [
        "Tenant",
        "Products",
        "KeyGroup",
        "KeyTemplate",
        "SecureShipmentKeys",
        "EcuHardwareSpec"
      ]
    },
    {
      "name": "Infrastructure",
      "tags": [
        "Versions",
        "Databases",
        "AppScopes",
        "Whoami",
        "Events",
        "EventStreaming",
        "Queueing",
        "AppSettings"
      ]
    },
    {
      "name": "Fazit",
      "tags": [
        "Stations",
        "ContainerFormat"
      ]
    }
  ]
}